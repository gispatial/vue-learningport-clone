{"remainingRequest":"/Users/crocslut/Desktop/Git/learningport-vue-netflix/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/crocslut/Desktop/Git/learningport-vue-netflix/src/pages/RecoverPassword/RecoverPasswordForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/crocslut/Desktop/Git/learningport-vue-netflix/src/pages/RecoverPassword/RecoverPasswordForm.vue","mtime":1629460388000},{"path":"/Users/crocslut/Desktop/Git/learningport-vue-netflix/node_modules/cache-loader/dist/cjs.js","mtime":1636081674369},{"path":"/Users/crocslut/Desktop/Git/learningport-vue-netflix/node_modules/babel-loader/lib/index.js","mtime":1636081672330},{"path":"/Users/crocslut/Desktop/Git/learningport-vue-netflix/node_modules/cache-loader/dist/cjs.js","mtime":1636081674369},{"path":"/Users/crocslut/Desktop/Git/learningport-vue-netflix/node_modules/vue-loader/lib/index.js","mtime":1636081674749}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Spinner from '../../components/Spinner/Spinner'\nimport { routes, actions } from \"../../helpers/constants\";\n\nexport default {\n  name: 'RecoverPasswordForm',\n  data() {\n    return {\n      password: '',\n      confirmPassword: '',\n      errors: {\n        password: [],\n        confirmPassword: [],\n      },\n    };\n  },\n  computed: {\n    user() {\n      return this.$store.getters.user;\n    },\n    error() {\n      return this.$store.getters.error;\n    },\n    loading() {\n      return this.$store.getters.loading;\n    }\n  },\n  components: {\n    Spinner,\n  },\n  watch: {\n    user(value) {\n      if (value !== null && value !== undefined) {\n        this.$router.push(routes.home);\n      }\n    },\n  },\n  methods: {\n    isFormValid() {\n      const { password, confirmPassword } = this;\n      this.errors = {\n        password: [],\n        confirmPassword: [],\n      };\n      if (password !== confirmPassword) {\n        this.errors.confirmPassword.push('Passwords do not match.')\n      }\n      if (password.length < 6) {\n        this.errors.password.push('Password should be at least 6 characters.')\n      }\n      if (password === password.toLowerCase() || password === password.toUpperCase()) {\n        this.errors.password.push('Contains at least one uppercase and lowercase characters.')\n      }\n      if (!this.isLatin(password)) {\n        this.errors.password.push('Latin characters and numbers only.')\n      }\n      return Object.values(this.errors).every(field => field.length === 0);\n    },\n    isLatin(password) {\n      let ifLatin =  /^[a-zA-z0-9_]+$/g;\n      return ifLatin.test(password);\n    },\n    onRecoverPassword() {\n      if (!this.isFormValid()) return null;\n      this.$store.dispatch(actions.recoverPassword, {\n        newPassword: this.password,\n        code: this.$route.query.oobCode,\n      });\n    },\n  },\n  destroyed() {\n    this.$store.dispatch(actions.clearError);\n  },\n};\n",{"version":3,"sources":["RecoverPasswordForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqFA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"RecoverPasswordForm.vue","sourceRoot":"src/pages/RecoverPassword","sourcesContent":["<template>\n  <div class=\"tile bg\">\n    <div class=\"tile__container\">\n      <h1 class=\"tile__title\">\n        Recover Password\n      </h1>\n      <form @submit.prevent=\"onRecoverPassword\">\n        <div class=\"form__field\">\n          <div :class=\"[{ 'input--error': errors.password.length !== 0 }, 'input__wrapper']\">\n            <input\n              id=\"password\"\n              name=\"password\"\n              type=\"password\"\n              required\n              placeholder=\"password\"\n              v-model=\"password\"\n              :class=\"[{ 'input--filled': password }, 'input']\"\n            >\n            <label class=\"input__placeholder\" for=\"password\">\n              Password\n            </label>\n          </div>\n          <ul class=\"form__error-list\">\n            <li :key=\"index\" class=\"form__error-item\" v-for=\"(error, index) in errors.password\">\n              {{ error }}\n            </li>\n          </ul>\n          <ul class=\"form__required-list\">\n            <li :class=\"[{ 'form__required-item--done': password.length >= 8 }, 'form__required-item']\">\n              <span class=\"form__required-text\">\n                At least 8 characters long\n              </span>\n            </li>\n            <li :class=\"[{ 'form__required-item--done': password !== password.toLowerCase() }, 'form__required-item']\">\n              <span class=\"form__required-text\">\n                One uppercase character\n              </span>\n            </li>\n            <li :class=\"[{ 'form__required-item--done': password !== password.toUpperCase() }, 'form__required-item']\">\n              <span class=\"form__required-text\">\n                One lowercase character\n              </span>\n            </li>\n            <li :class=\"[{ 'form__required-item--done': isLatin(password) }, 'form__required-item']\">\n              <span class=\"form__required-text\">\n                Latin characters only\n              </span>\n            </li>\n          </ul>\n        </div>\n        <div class=\"form__field\">\n          <div :class=\"[{ 'input--error': errors.password.length !== 0 }, 'input__wrapper']\">\n            <input\n              id=\"confirm-password\"\n              name=\"confirm-password\"\n              type=\"password\"\n              required\n              placeholder=\"Confirm Password\"\n              v-model=\"confirmPassword\"\n              :class=\"[{ 'input--filled': confirmPassword }, 'input']\"\n            >\n            <label class=\"input__placeholder\" for=\"confirm-password\">\n              Confirm Password\n            </label>\n          </div>\n          <ul class=\"form__error-list\">\n            <li class=\"form__error-item\" v-for=\"(error, index) in errors.confirmPassword\" :key=\"index\">\n              {{ error }}\n            </li>\n          </ul>\n        </div>\n        <div class=\"form__btns\">\n          <button type=\"submit\" class=\"btn btn--primary\" :disabled=\"loading\">\n            Change Password\n          </button>\n        </div>\n      </form>\n      <div class=\"Spinner__overflow\" v-if=\"loading\">\n        <Spinner />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n  import Spinner from '../../components/Spinner/Spinner'\n  import { routes, actions } from \"../../helpers/constants\";\n\n  export default {\n    name: 'RecoverPasswordForm',\n    data() {\n      return {\n        password: '',\n        confirmPassword: '',\n        errors: {\n          password: [],\n          confirmPassword: [],\n        },\n      };\n    },\n    computed: {\n      user() {\n        return this.$store.getters.user;\n      },\n      error() {\n        return this.$store.getters.error;\n      },\n      loading() {\n        return this.$store.getters.loading;\n      }\n    },\n    components: {\n      Spinner,\n    },\n    watch: {\n      user(value) {\n        if (value !== null && value !== undefined) {\n          this.$router.push(routes.home);\n        }\n      },\n    },\n    methods: {\n      isFormValid() {\n        const { password, confirmPassword } = this;\n        this.errors = {\n          password: [],\n          confirmPassword: [],\n        };\n        if (password !== confirmPassword) {\n          this.errors.confirmPassword.push('Passwords do not match.')\n        }\n        if (password.length < 6) {\n          this.errors.password.push('Password should be at least 6 characters.')\n        }\n        if (password === password.toLowerCase() || password === password.toUpperCase()) {\n          this.errors.password.push('Contains at least one uppercase and lowercase characters.')\n        }\n        if (!this.isLatin(password)) {\n          this.errors.password.push('Latin characters and numbers only.')\n        }\n        return Object.values(this.errors).every(field => field.length === 0);\n      },\n      isLatin(password) {\n        let ifLatin =  /^[a-zA-z0-9_]+$/g;\n        return ifLatin.test(password);\n      },\n      onRecoverPassword() {\n        if (!this.isFormValid()) return null;\n        this.$store.dispatch(actions.recoverPassword, {\n          newPassword: this.password,\n          code: this.$route.query.oobCode,\n        });\n      },\n    },\n    destroyed() {\n      this.$store.dispatch(actions.clearError);\n    },\n  };\n</script>\n"]}]}