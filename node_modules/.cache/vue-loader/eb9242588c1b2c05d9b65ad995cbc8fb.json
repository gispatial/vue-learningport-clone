{"remainingRequest":"/Users/crocslut/Desktop/Git/learningport-vue-netflix/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/crocslut/Desktop/Git/learningport-vue-netflix/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/crocslut/Desktop/Git/learningport-vue-netflix/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/crocslut/Desktop/Git/learningport-vue-netflix/src/pages/SignUp/SignUp.vue?vue&type=template&id=4e1c129b&","dependencies":[{"path":"/Users/crocslut/Desktop/Git/learningport-vue-netflix/src/pages/SignUp/SignUp.vue","mtime":1629460388000},{"path":"/Users/crocslut/Desktop/Git/learningport-vue-netflix/node_modules/cache-loader/dist/cjs.js","mtime":1636081674369},{"path":"/Users/crocslut/Desktop/Git/learningport-vue-netflix/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1636081674749},{"path":"/Users/crocslut/Desktop/Git/learningport-vue-netflix/node_modules/cache-loader/dist/cjs.js","mtime":1636081674369},{"path":"/Users/crocslut/Desktop/Git/learningport-vue-netflix/node_modules/vue-loader/lib/index.js","mtime":1636081674749}],"contextDependencies":[],"result":["var render = function () {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"SignUp\" }, [\n    _c(\"div\", { staticClass: \"bg tile\" }, [\n      _c(\"div\", { staticClass: \"tile__container\" }, [\n        _c(\"h1\", { staticClass: \"tile__title\" }, [\n          _vm._v(\"\\n        Sign Up\\n      \"),\n        ]),\n        _c(\n          \"form\",\n          {\n            staticClass: \"form\",\n            on: {\n              submit: function ($event) {\n                $event.preventDefault()\n                return _vm.onSignUp.apply(null, arguments)\n              },\n            },\n          },\n          [\n            _c(\"div\", { staticClass: \"form__field\" }, [\n              _c(\"div\", { staticClass: \"input__wrapper\" }, [\n                _c(\"input\", {\n                  directives: [\n                    {\n                      name: \"model\",\n                      rawName: \"v-model\",\n                      value: _vm.email,\n                      expression: \"email\",\n                    },\n                  ],\n                  class: [{ \"input--filled\": _vm.email }, \"input\"],\n                  attrs: {\n                    id: \"email\",\n                    type: \"email\",\n                    required: \"\",\n                    placeholder: \"Email\",\n                  },\n                  domProps: { value: _vm.email },\n                  on: {\n                    input: function ($event) {\n                      if ($event.target.composing) {\n                        return\n                      }\n                      _vm.email = $event.target.value\n                    },\n                  },\n                }),\n                _c(\n                  \"label\",\n                  {\n                    staticClass: \"input__placeholder\",\n                    attrs: { for: \"email\" },\n                  },\n                  [_vm._v(\"\\n              Email\\n            \")]\n                ),\n              ]),\n            ]),\n            _c(\"div\", { staticClass: \"form__field\" }, [\n              _c(\n                \"div\",\n                {\n                  class: [\n                    { \"input--error\": _vm.errors.password.length !== 0 },\n                    \"input__wrapper\",\n                  ],\n                },\n                [\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.password,\n                        expression: \"password\",\n                      },\n                    ],\n                    class: [{ \"input--filled\": _vm.password }, \"input\"],\n                    attrs: {\n                      id: \"password\",\n                      type: \"password\",\n                      required: \"\",\n                      placeholder: \"password\",\n                    },\n                    domProps: { value: _vm.password },\n                    on: {\n                      input: function ($event) {\n                        if ($event.target.composing) {\n                          return\n                        }\n                        _vm.password = $event.target.value\n                      },\n                    },\n                  }),\n                  _c(\n                    \"label\",\n                    {\n                      staticClass: \"input__placeholder\",\n                      attrs: { for: \"password\" },\n                    },\n                    [_vm._v(\"\\n              Password\\n            \")]\n                  ),\n                ]\n              ),\n              _c(\n                \"ul\",\n                { staticClass: \"form__error-list\" },\n                _vm._l(_vm.errors.password, function (error, index) {\n                  return _c(\n                    \"li\",\n                    { key: index, staticClass: \"form__error-item\" },\n                    [\n                      _vm._v(\n                        \"\\n              \" + _vm._s(error) + \"\\n            \"\n                      ),\n                    ]\n                  )\n                }),\n                0\n              ),\n              _c(\"ul\", { staticClass: \"form__required-list\" }, [\n                _c(\n                  \"li\",\n                  {\n                    class: [\n                      { \"form__required-item--done\": _vm.password.length >= 6 },\n                      \"form__required-item\",\n                    ],\n                  },\n                  [\n                    _c(\"span\", { staticClass: \"form__required-text\" }, [\n                      _vm._v(\n                        \"\\n                At least 6 characters long\\n              \"\n                      ),\n                    ]),\n                  ]\n                ),\n                _c(\n                  \"li\",\n                  {\n                    class: [\n                      {\n                        \"form__required-item--done\":\n                          _vm.password !== _vm.password.toLowerCase(),\n                      },\n                      \"form__required-item\",\n                    ],\n                  },\n                  [\n                    _c(\"span\", { staticClass: \"form__required-text\" }, [\n                      _vm._v(\n                        \"\\n                One uppercase character\\n              \"\n                      ),\n                    ]),\n                  ]\n                ),\n                _c(\n                  \"li\",\n                  {\n                    class: [\n                      {\n                        \"form__required-item--done\":\n                          _vm.password !== _vm.password.toUpperCase(),\n                      },\n                      \"form__required-item\",\n                    ],\n                  },\n                  [\n                    _c(\"span\", { staticClass: \"form__required-text\" }, [\n                      _vm._v(\n                        \"\\n                One lowercase character\\n              \"\n                      ),\n                    ]),\n                  ]\n                ),\n                _c(\n                  \"li\",\n                  {\n                    class: [\n                      {\n                        \"form__required-item--done\": _vm.isLatin(_vm.password),\n                      },\n                      \"form__required-item\",\n                    ],\n                  },\n                  [\n                    _c(\"span\", { staticClass: \"form__required-text\" }, [\n                      _vm._v(\n                        \"\\n                Latin characters only\\n              \"\n                      ),\n                    ]),\n                  ]\n                ),\n              ]),\n            ]),\n            _c(\"div\", { staticClass: \"form__field\" }, [\n              _c(\n                \"div\",\n                {\n                  class: [\n                    { \"input--error\": _vm.errors.password.length !== 0 },\n                    \"input__wrapper\",\n                  ],\n                },\n                [\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.confirmPassword,\n                        expression: \"confirmPassword\",\n                      },\n                    ],\n                    class: [{ \"input--filled\": _vm.confirmPassword }, \"input\"],\n                    attrs: {\n                      id: \"confirm-password\",\n                      type: \"password\",\n                      required: \"\",\n                      placeholder: \"Confirm Password\",\n                    },\n                    domProps: { value: _vm.confirmPassword },\n                    on: {\n                      input: function ($event) {\n                        if ($event.target.composing) {\n                          return\n                        }\n                        _vm.confirmPassword = $event.target.value\n                      },\n                    },\n                  }),\n                  _c(\n                    \"label\",\n                    {\n                      staticClass: \"input__placeholder\",\n                      attrs: { for: \"confirm-password\" },\n                    },\n                    [_vm._v(\"\\n              Confirm Password\\n            \")]\n                  ),\n                ]\n              ),\n              _c(\n                \"ul\",\n                { staticClass: \"form__error-list\" },\n                _vm._l(_vm.errors.confirmPassword, function (error, index) {\n                  return _c(\n                    \"li\",\n                    { key: index, staticClass: \"form__error-item\" },\n                    [\n                      _vm._v(\n                        \"\\n              \" + _vm._s(error) + \"\\n            \"\n                      ),\n                    ]\n                  )\n                }),\n                0\n              ),\n            ]),\n            _c(\"div\", { staticClass: \"form__btns\" }, [\n              _c(\n                \"button\",\n                {\n                  staticClass: \"btn btn--primary\",\n                  attrs: { type: \"submit\", disabled: _vm.loading },\n                },\n                [_vm._v(\"\\n            Sign Up\\n          \")]\n              ),\n            ]),\n          ]\n        ),\n        _vm.loading\n          ? _c(\"div\", { staticClass: \"Spinner__overflow\" }, [_c(\"Spinner\")], 1)\n          : _vm._e(),\n      ]),\n    ]),\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}