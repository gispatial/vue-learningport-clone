{"remainingRequest":"/Users/crocslut/Desktop/Git/learningport-vue-netflix/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/crocslut/Desktop/Git/learningport-vue-netflix/src/components/Slider/Slider.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/crocslut/Desktop/Git/learningport-vue-netflix/src/components/Slider/Slider.vue","mtime":1629460388000},{"path":"/Users/crocslut/Desktop/Git/learningport-vue-netflix/node_modules/cache-loader/dist/cjs.js","mtime":1636081674369},{"path":"/Users/crocslut/Desktop/Git/learningport-vue-netflix/node_modules/babel-loader/lib/index.js","mtime":1636081672330},{"path":"/Users/crocslut/Desktop/Git/learningport-vue-netflix/node_modules/cache-loader/dist/cjs.js","mtime":1636081674369},{"path":"/Users/crocslut/Desktop/Git/learningport-vue-netflix/node_modules/vue-loader/lib/index.js","mtime":1636081674749}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { props, handlers, helpers, preparations, watchers } from '../../services/SliderService';\nimport Spinner from '../../components/Spinner/Spinner.vue';\n\nexport default {\n  name: 'slider',\n  mixins: [handlers, helpers, preparations, props, watchers],\n  data () {\n    return {\n      slides: [],\n      slidesClonedBefore: [],\n      slidesClonedAfter: [],\n      autoplayInterval: null,\n      autoplayTimeout: null,\n      pauseAutoPlay: false,\n      autoplayStart: null,\n      autoplayRemaining: null,\n      currentSlide: null,\n      mouseDown: false,\n      dragStartX: 0,\n      dragStartY: 0,\n      dragDistance: 0,\n      swipeDistance: 50,\n      translateX: 0,\n      transitionDelay: 0,\n      widthWindow: 0,\n      widthContainer: 0,\n      widthSlide: 0,\n      settings: {},\n      loading: false,\n    };\n  },\n  components: {\n    Spinner,\n  },\n  computed: {\n    sliderClasses() {\n      return {\n        'Slider--auto-play': this.settings.autoplay,\n        'Slider--disabled': this.settings.disabled,\n        'Slider--fade': this.settings.fade && !this.settings.disabled,\n        'Slider--rtl': this.settings.rtl\n      };\n    },\n    canGoToPrev() {\n      return this.settings.infinite || this.currentSlide > 0;\n    },\n    canGoToNext() {\n      return this.settings.infinite || this.currentSlide < this.slidesCount - 1;\n    },\n    clonedSlides() {\n      return !this.settings.disabled && !this.settings.fade && this.settings.infinite;\n    },\n    breakpoints() {\n      if (!this.initialSettings.responsive) return [];\n      return this.initialSettings.responsive.map(item => item.breakpoint);\n    },\n    currentBreakpoint() {\n      let breakpoints = this.breakpoints.map(item => item).reverse();\n      if (this.initialSettings.mobileFirst) return breakpoints.find(item => item < this.widthWindow) || 0;\n      return breakpoints.find(item => item > this.widthWindow) || null;\n    },\n    allSlides() {\n      if (this.clonedSlides) return [...this.slidesClonedBefore, ...this.slides, ...this.slidesClonedAfter];\n      return this.slides;\n    },\n    slidesCount() {\n      return this.slides.length;\n    },\n    allSlidesCount() {\n      return this.allSlides.length;\n    },\n    marginX() {\n      let marginX = (this.clonedSlides) ? this.slidesCount * this.widthSlide : 0;\n      if (this.settings.centerMode) {\n        marginX -= (Math.floor(this.settings.slidesToShow / 2) - +(this.settings.slidesToShow % 2 === 0)) * this.widthSlide;\n      }\n      return (this.settings.rtl) ? marginX : -1 * marginX;\n    }\n  },\n  methods: {\n    reload() {\n      this.getWidth();\n      this.prepareSettings();\n      this.prepareSlides();\n      this.prepareCarousel();\n      this.toggleFade();\n    },\n    toggleFade() {\n      let enabled = (!this.settings.disabled && this.settings.fade);\n      for (let i = 0; i < this.slidesCount; i++) {\n        this.slides[i].style.transition = (enabled)\n          ? `opacity ${this.settings.timing} ${this.settings.speed}ms`\n          : 'none';\n        this.slides[i].style.transform = (enabled)\n          ? `translate(-${i * this.widthSlide}px)`\n          : 'none';\n      }\n    },\n    toggleAutoPlay() {\n      let enabled = (!this.settings.disabled && this.settings.autoplay);\n      if (!this.autoplayInterval && enabled) {\n        this.autoplayInterval = setInterval(() => {\n          if (!document.hidden) {\n            if (!this.canGoToNext) this.disableAutoPlay();\n            else this.goToNext();\n          }\n        }, this.settings.autoplaySpeed)\n      } else {\n        this.disableAutoPlay();\n      }\n    },\n    toggleLoading() {\n      this.loading = !this.loading;\n    },\n    restartAutoPlay() {\n      this.disableAutoPlay();\n      this.toggleAutoPlay();\n    },\n    disableAutoPlay() {\n      clearInterval(this.autoplayInterval);\n      this.autoplayInterval = null;\n    },\n    clearAutoPlayPause() {\n      clearTimeout(this.autoplayTimeout);\n      this.autoplayRemaining = null;\n    },\n    disableScroll() {\n      document.ontouchmove = e => e.preventDefault();\n    },\n    enableScroll() {\n      document.ontouchmove = () => true;\n    },\n    getCurrentSlide() {\n      return this.currentSlide;\n    },\n    getCurrentBreakpoint() {\n      return this.currentBreakpoint;\n    },\n    getCurrentSettings() {\n      return this.settings;\n    },\n    getInitialSettings() {\n      return this.initialSettings;\n    },\n    goToNext() {\n      if (this.canGoToNext) {\n        this.goTo(this.currentSlide + 1 * this.settings.slidesToScroll);\n      }\n    },\n    goToPrev() {\n      if (this.canGoToPrev) {\n        this.goTo(this.currentSlide - 1 * this.settings.slidesToScroll);\n      }\n    },\n    goTo(n, transition = true, asNav = false) {\n      if (this.settings.disabled) return false;\n\n      if (!asNav) {\n        this.settings.asNavFor.forEach(carousel => {\n          if (carousel) carousel.goTo(n, transition, true);\n        });\n      }\n\n      let realNextSlide = n;\n\n      if (transition) {\n        if (this.settings.infinite && n < 0) {\n          realNextSlide = this.slidesCount - 1;\n        } else if (n >= this.slidesCount) {\n          realNextSlide = 0;\n        }\n\n        this.$emit('beforeChange', { currentSlide: this.currentSlide, nextSlide: realNextSlide });\n\n        this.currentSlide = realNextSlide;\n\n        if (n !== realNextSlide) {\n          setTimeout(() => {\n            this.goTo(realNextSlide, false);\n          }, this.settings.speed)\n        }\n      }\n\n      let translateX = (!this.settings.fade) ? n * this.widthSlide : 0;\n      this.transitionDelay = (transition) ? this.speed : 0;\n      this.translateX = (this.settings.rtl) ? translateX : -1 * translateX;\n    },\n  },\n  created() {\n    // Read settings from options object\n    if (this.options) {\n      for (let key in this.options) {\n        this.initialSettings[key] = this.options[key];\n      }\n    }\n    // Sort breakpoints\n    if (this.initialSettings.responsive) {\n      this.initialSettings.responsive.sort(this.compare);\n    }\n    // Set first load settings\n    Object.assign(this.settings, this.initialSettings);\n  },\n  mounted() {\n    window.addEventListener('resize', this.getWidth);\n    if ('ontouchstart' in window) {\n      this.$refs.track.addEventListener('touchstart', this.handleMouseDown);\n      this.$refs.track.addEventListener('touchend', this.handleMouseUp);\n      this.$refs.track.addEventListener('touchmove', this.handleMouseMove);\n    } else {\n      this.$refs.track.addEventListener('mousedown', this.handleMouseDown);\n      this.$refs.track.addEventListener('mouseup', this.handleMouseUp);\n      this.$refs.track.addEventListener('mousemove', this.handleMouseMove);\n    }\n    this.reload();\n  },\n  beforeDestroy() {\n    window.removeEventListener('resize', this.getWidth);\n\n    this.$refs.track.removeEventListener(('ontouchstart' in window) ? 'touchstart' : 'mousedown', this.handleMouseDown);\n    this.$refs.track.removeEventListener(('ontouchstart' in window) ? 'touchend' : 'mouseup', this.handleMouseUp);\n    this.$refs.track.removeEventListener(('ontouchstart' in window) ? 'touchmove' : 'mousemove', this.handleMouseMove);\n\n    this.disableAutoPlay();\n  },\n}\n",{"version":3,"sources":["Slider.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"Slider.vue","sourceRoot":"src/components/Slider","sourcesContent":["<template>\n  <div class=\"Slider\" :class=\"sliderClasses\">\n    <div ref=\"list\" class=\"Slider__list\">\n      <div\n        ref=\"track\"\n        class=\"Slider__track\"\n        :style=\"{transform: `translate(${translateX + marginX}px)`, transition: `transform ${settings.timing} ${transitionDelay}ms`}\"\n        @mouseover=\"handleMouseOver('track')\"\n        @mouseout=\"handleMouseOut('track')\"\n      >\n        <div\n          :class=\"['Slider__slides', 'Slider__slides--cloned', settings.extraClass]\"\n          ref=\"slidesClonedBefore\"\n          v-if=\"clonedSlides\"\n        >\n          <slot />\n        </div>\n        <div :class=\"['Slider__slides', 'Slider__slides--regular', settings.extraClass]\" ref=\"slides\">\n          <slot />\n        </div>\n        <div\n          :class=\"['Slider__slides', 'Slider__slides--cloned', settings.extraClass]\"\n          ref=\"slidesClonedAfter\"\n          v-if=\"clonedSlides\"\n        >\n          <slot />\n        </div>\n      </div>\n    </div>\n\n    <div class=\"Slider__actions\" v-if=\"!settings.disabled && (settings.navButtons || settings.dots)\">\n      <button\n        type=\"button\"\n        ref=\"prevButton\"\n        v-if=\"settings.navButtons && !settings.disabled\"\n        class=\"Slider__nav-button Slider__nav-button--prev\"\n        :disabled=\"!canGoToPrev\"\n        @click=\"goToPrev(), restartAutoPlay()\"\n      >\n        <slot name=\"prevButton\">←</slot>\n      </button>\n\n      <ul ref=\"dots\" v-if=\"settings.dots && !settings.disabled\" class=\"Slider__dots\">\n        <li\n          v-for=\"n in slidesCount\"\n          :key=\"n\" class=\"Slider__dot\"\n          :class=\"{'Slider__dot--current': n - 1 === currentSlide}\"\n          @mouseover=\"handleMouseOver('dot')\"\n          @mouseout=\"handleMouseOut('dot')\"\n        >\n          <button @click=\"goTo(n - 1), restartAutoPlay()\" type=\"button\">{{n}}</button>\n        </li>\n      </ul>\n\n      <button\n        type=\"button\"\n        ref=\"nextButton\"\n        v-if=\"settings.navButtons && !settings.disabled\"\n        class=\"Slider__nav-button Slider__nav-button--next\"\n        :disabled=\"!canGoToNext\"\n        @click=\"goToNext(), restartAutoPlay()\"\n      >\n        <slot name=\"nextButton\">→</slot>\n      </button>\n    </div>\n\n    <div class=\"Spinner__overflow\" v-if=\"loading\">\n      <Spinner />\n    </div>\n  </div>\n</template>\n\n<script>\n  import { props, handlers, helpers, preparations, watchers } from '../../services/SliderService';\n  import Spinner from '../../components/Spinner/Spinner.vue';\n\n  export default {\n    name: 'slider',\n    mixins: [handlers, helpers, preparations, props, watchers],\n    data () {\n      return {\n        slides: [],\n        slidesClonedBefore: [],\n        slidesClonedAfter: [],\n        autoplayInterval: null,\n        autoplayTimeout: null,\n        pauseAutoPlay: false,\n        autoplayStart: null,\n        autoplayRemaining: null,\n        currentSlide: null,\n        mouseDown: false,\n        dragStartX: 0,\n        dragStartY: 0,\n        dragDistance: 0,\n        swipeDistance: 50,\n        translateX: 0,\n        transitionDelay: 0,\n        widthWindow: 0,\n        widthContainer: 0,\n        widthSlide: 0,\n        settings: {},\n        loading: false,\n      };\n    },\n    components: {\n      Spinner,\n    },\n    computed: {\n      sliderClasses() {\n        return {\n          'Slider--auto-play': this.settings.autoplay,\n          'Slider--disabled': this.settings.disabled,\n          'Slider--fade': this.settings.fade && !this.settings.disabled,\n          'Slider--rtl': this.settings.rtl\n        };\n      },\n      canGoToPrev() {\n        return this.settings.infinite || this.currentSlide > 0;\n      },\n      canGoToNext() {\n        return this.settings.infinite || this.currentSlide < this.slidesCount - 1;\n      },\n      clonedSlides() {\n        return !this.settings.disabled && !this.settings.fade && this.settings.infinite;\n      },\n      breakpoints() {\n        if (!this.initialSettings.responsive) return [];\n        return this.initialSettings.responsive.map(item => item.breakpoint);\n      },\n      currentBreakpoint() {\n        let breakpoints = this.breakpoints.map(item => item).reverse();\n        if (this.initialSettings.mobileFirst) return breakpoints.find(item => item < this.widthWindow) || 0;\n        return breakpoints.find(item => item > this.widthWindow) || null;\n      },\n      allSlides() {\n        if (this.clonedSlides) return [...this.slidesClonedBefore, ...this.slides, ...this.slidesClonedAfter];\n        return this.slides;\n      },\n      slidesCount() {\n        return this.slides.length;\n      },\n      allSlidesCount() {\n        return this.allSlides.length;\n      },\n      marginX() {\n        let marginX = (this.clonedSlides) ? this.slidesCount * this.widthSlide : 0;\n        if (this.settings.centerMode) {\n          marginX -= (Math.floor(this.settings.slidesToShow / 2) - +(this.settings.slidesToShow % 2 === 0)) * this.widthSlide;\n        }\n        return (this.settings.rtl) ? marginX : -1 * marginX;\n      }\n    },\n    methods: {\n      reload() {\n        this.getWidth();\n        this.prepareSettings();\n        this.prepareSlides();\n        this.prepareCarousel();\n        this.toggleFade();\n      },\n      toggleFade() {\n        let enabled = (!this.settings.disabled && this.settings.fade);\n        for (let i = 0; i < this.slidesCount; i++) {\n          this.slides[i].style.transition = (enabled)\n            ? `opacity ${this.settings.timing} ${this.settings.speed}ms`\n            : 'none';\n          this.slides[i].style.transform = (enabled)\n            ? `translate(-${i * this.widthSlide}px)`\n            : 'none';\n        }\n      },\n      toggleAutoPlay() {\n        let enabled = (!this.settings.disabled && this.settings.autoplay);\n        if (!this.autoplayInterval && enabled) {\n          this.autoplayInterval = setInterval(() => {\n            if (!document.hidden) {\n              if (!this.canGoToNext) this.disableAutoPlay();\n              else this.goToNext();\n            }\n          }, this.settings.autoplaySpeed)\n        } else {\n          this.disableAutoPlay();\n        }\n      },\n      toggleLoading() {\n        this.loading = !this.loading;\n      },\n      restartAutoPlay() {\n        this.disableAutoPlay();\n        this.toggleAutoPlay();\n      },\n      disableAutoPlay() {\n        clearInterval(this.autoplayInterval);\n        this.autoplayInterval = null;\n      },\n      clearAutoPlayPause() {\n        clearTimeout(this.autoplayTimeout);\n        this.autoplayRemaining = null;\n      },\n      disableScroll() {\n        document.ontouchmove = e => e.preventDefault();\n      },\n      enableScroll() {\n        document.ontouchmove = () => true;\n      },\n      getCurrentSlide() {\n        return this.currentSlide;\n      },\n      getCurrentBreakpoint() {\n        return this.currentBreakpoint;\n      },\n      getCurrentSettings() {\n        return this.settings;\n      },\n      getInitialSettings() {\n        return this.initialSettings;\n      },\n      goToNext() {\n        if (this.canGoToNext) {\n          this.goTo(this.currentSlide + 1 * this.settings.slidesToScroll);\n        }\n      },\n      goToPrev() {\n        if (this.canGoToPrev) {\n          this.goTo(this.currentSlide - 1 * this.settings.slidesToScroll);\n        }\n      },\n      goTo(n, transition = true, asNav = false) {\n        if (this.settings.disabled) return false;\n\n        if (!asNav) {\n          this.settings.asNavFor.forEach(carousel => {\n            if (carousel) carousel.goTo(n, transition, true);\n          });\n        }\n\n        let realNextSlide = n;\n\n        if (transition) {\n          if (this.settings.infinite && n < 0) {\n            realNextSlide = this.slidesCount - 1;\n          } else if (n >= this.slidesCount) {\n            realNextSlide = 0;\n          }\n\n          this.$emit('beforeChange', { currentSlide: this.currentSlide, nextSlide: realNextSlide });\n\n          this.currentSlide = realNextSlide;\n\n          if (n !== realNextSlide) {\n            setTimeout(() => {\n              this.goTo(realNextSlide, false);\n            }, this.settings.speed)\n          }\n        }\n\n        let translateX = (!this.settings.fade) ? n * this.widthSlide : 0;\n        this.transitionDelay = (transition) ? this.speed : 0;\n        this.translateX = (this.settings.rtl) ? translateX : -1 * translateX;\n      },\n    },\n    created() {\n      // Read settings from options object\n      if (this.options) {\n        for (let key in this.options) {\n          this.initialSettings[key] = this.options[key];\n        }\n      }\n      // Sort breakpoints\n      if (this.initialSettings.responsive) {\n        this.initialSettings.responsive.sort(this.compare);\n      }\n      // Set first load settings\n      Object.assign(this.settings, this.initialSettings);\n    },\n    mounted() {\n      window.addEventListener('resize', this.getWidth);\n      if ('ontouchstart' in window) {\n        this.$refs.track.addEventListener('touchstart', this.handleMouseDown);\n        this.$refs.track.addEventListener('touchend', this.handleMouseUp);\n        this.$refs.track.addEventListener('touchmove', this.handleMouseMove);\n      } else {\n        this.$refs.track.addEventListener('mousedown', this.handleMouseDown);\n        this.$refs.track.addEventListener('mouseup', this.handleMouseUp);\n        this.$refs.track.addEventListener('mousemove', this.handleMouseMove);\n      }\n      this.reload();\n    },\n    beforeDestroy() {\n      window.removeEventListener('resize', this.getWidth);\n\n      this.$refs.track.removeEventListener(('ontouchstart' in window) ? 'touchstart' : 'mousedown', this.handleMouseDown);\n      this.$refs.track.removeEventListener(('ontouchstart' in window) ? 'touchend' : 'mouseup', this.handleMouseUp);\n      this.$refs.track.removeEventListener(('ontouchstart' in window) ? 'touchmove' : 'mousemove', this.handleMouseMove);\n\n      this.disableAutoPlay();\n    },\n  }\n</script>\n\n<style lang=\"scss\">\n  @import \"Slider\";\n</style>\n"]}]}