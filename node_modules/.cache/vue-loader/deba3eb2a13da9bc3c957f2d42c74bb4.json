{"remainingRequest":"/Users/crocslut/Desktop/Git/learningport-vue-netflix/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/crocslut/Desktop/Git/learningport-vue-netflix/src/components/Pagination/Pagination.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/crocslut/Desktop/Git/learningport-vue-netflix/src/components/Pagination/Pagination.vue","mtime":1629460388000},{"path":"/Users/crocslut/Desktop/Git/learningport-vue-netflix/node_modules/cache-loader/dist/cjs.js","mtime":1636081674369},{"path":"/Users/crocslut/Desktop/Git/learningport-vue-netflix/node_modules/babel-loader/lib/index.js","mtime":1636081672330},{"path":"/Users/crocslut/Desktop/Git/learningport-vue-netflix/node_modules/cache-loader/dist/cjs.js","mtime":1636081674369},{"path":"/Users/crocslut/Desktop/Git/learningport-vue-netflix/node_modules/vue-loader/lib/index.js","mtime":1636081674749}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'Pagination',\n  props: {\n    currentPage: {\n      type: Number,\n      required: true,\n    },\n    totalPages: {\n      type: Number,\n      required: true,\n    }\n  },\n  computed: {\n    getPages () {\n      return this.getVisiblePages(this.currentPage, this.totalPages);\n    },\n  },\n  methods: {\n    getVisiblePages (page, total) {\n      if (total < 8) return [1, 2, 3, 4, 5, 6, 7].filter(page => page <= total);\n      if (page > 4 && page + 2 < total) return [1, page - 2, page - 1, page, page + 1, page + 2, total];\n      if (page > 4 && page + 3 >= total) return [1, total - 5, total - 4, total - 3, total - 2, total - 1, total];\n      return [1, 2, 3, 4, 5, 6, total];\n    },\n    pageChange(page) {\n      if (page !== this.currentPage) {\n        let params = { ...this.$route.query, page: +page || 1 };\n        this.updateQuery(params);\n      }\n    },\n    updateQuery(params) {\n      let newQuery = Object.keys(params)\n        .filter(key => {\n          if (key === '') return false;\n          if (params[key] instanceof Array) return params[key].length > 0;\n          return params[key] !== '';\n        })\n        .map(key => key + '=' + params[key]).join('&');\n\n      this.$router.push(`?${newQuery}`);\n      this.$emit('load');\n    }\n  },\n}\n",{"version":3,"sources":["Pagination.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"Pagination.vue","sourceRoot":"src/components/Pagination","sourcesContent":["<template>\n  <div class=\"Pagination\">\n    <ul v-if=\"totalPages !== 1\" class=\"Pagination__list\">\n      <li class=\"Pagination__item\">\n        <button\n          :disabled=\"currentPage === 1\"\n          @click=\"pageChange(currentPage - 1)\"\n          class=\"Pagination__btn\"\n        >\n          <font-awesome-icon :icon=\"['fas', 'chevron-left']\" />\n        </button>\n      </li>\n      <li v-for=\"(page,index) in getPages\" :key=\"index\" class=\"Pagination__item\">\n        <span v-if=\"getPages[index - 1] + 1 < page\" class=\"Pagination__dots\">...</span>\n        <button\n          @click=\"pageChange(page)\"\n          :class=\"{'Pagination__btn--active': page === currentPage}\"\n          class=\"Pagination__btn\"\n        >\n          {{ page }}\n        </button>\n      </li>\n      <li class=\"Pagination__item\">\n        <button\n          :disabled=\"currentPage === totalPages\"\n          @click=\"pageChange(currentPage + 1)\"\n          class=\"Pagination__btn\"\n        >\n          <font-awesome-icon :icon=\"['fas', 'chevron-right']\" />\n        </button>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\n  export default {\n    name: 'Pagination',\n    props: {\n      currentPage: {\n        type: Number,\n        required: true,\n      },\n      totalPages: {\n        type: Number,\n        required: true,\n      }\n    },\n    computed: {\n      getPages () {\n        return this.getVisiblePages(this.currentPage, this.totalPages);\n      },\n    },\n    methods: {\n      getVisiblePages (page, total) {\n        if (total < 8) return [1, 2, 3, 4, 5, 6, 7].filter(page => page <= total);\n        if (page > 4 && page + 2 < total) return [1, page - 2, page - 1, page, page + 1, page + 2, total];\n        if (page > 4 && page + 3 >= total) return [1, total - 5, total - 4, total - 3, total - 2, total - 1, total];\n        return [1, 2, 3, 4, 5, 6, total];\n      },\n      pageChange(page) {\n        if (page !== this.currentPage) {\n          let params = { ...this.$route.query, page: +page || 1 };\n          this.updateQuery(params);\n        }\n      },\n      updateQuery(params) {\n        let newQuery = Object.keys(params)\n          .filter(key => {\n            if (key === '') return false;\n            if (params[key] instanceof Array) return params[key].length > 0;\n            return params[key] !== '';\n          })\n          .map(key => key + '=' + params[key]).join('&');\n\n        this.$router.push(`?${newQuery}`);\n        this.$emit('load');\n      }\n    },\n  }\n</script>\n\n<style lang=\"scss\">\n  @import 'Pagination';\n</style>\n"]}]}