{"remainingRequest":"/Users/crocslut/Desktop/Git/learningport-vue-netflix/node_modules/babel-loader/lib/index.js!/Users/crocslut/Desktop/Git/learningport-vue-netflix/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/crocslut/Desktop/Git/learningport-vue-netflix/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/crocslut/Desktop/Git/learningport-vue-netflix/src/pages/SignUp/SignUp.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/crocslut/Desktop/Git/learningport-vue-netflix/src/pages/SignUp/SignUp.vue","mtime":1629460388000},{"path":"/Users/crocslut/Desktop/Git/learningport-vue-netflix/babel.config.js","mtime":1629460388000},{"path":"/Users/crocslut/Desktop/Git/learningport-vue-netflix/node_modules/cache-loader/dist/cjs.js","mtime":1636081674369},{"path":"/Users/crocslut/Desktop/Git/learningport-vue-netflix/node_modules/babel-loader/lib/index.js","mtime":1636081672330},{"path":"/Users/crocslut/Desktop/Git/learningport-vue-netflix/node_modules/cache-loader/dist/cjs.js","mtime":1636081674369},{"path":"/Users/crocslut/Desktop/Git/learningport-vue-netflix/node_modules/vue-loader/lib/index.js","mtime":1636081674749}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.object.values\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Spinner from \"../../components/Spinner/Spinner\";\nimport { routes, actions } from \"../../helpers/constants\";\nexport default {\n  name: 'SignUp',\n  data: function data() {\n    return {\n      email: '',\n      password: '',\n      confirmPassword: '',\n      errors: {\n        password: [],\n        confirmPassword: []\n      }\n    };\n  },\n  computed: {\n    user: function user() {\n      return this.$store.getters.user;\n    },\n    loading: function loading() {\n      return this.$store.getters.loading;\n    }\n  },\n  components: {\n    Spinner: Spinner\n  },\n  watch: {\n    user: function user(value) {\n      if (value !== null && value !== undefined) {\n        this.$router.push(routes.home);\n      }\n    }\n  },\n  methods: {\n    isFormValid: function isFormValid() {\n      var password = this.password,\n          confirmPassword = this.confirmPassword;\n      this.errors = {\n        password: [],\n        confirmPassword: []\n      };\n\n      if (password !== confirmPassword) {\n        this.errors.confirmPassword.push('Passwords do not match.');\n      }\n\n      if (password.length < 6) {\n        this.errors.password.push('Password should be at least 6 characters.');\n      }\n\n      if (password === password.toLowerCase() || password === password.toUpperCase()) {\n        this.errors.password.push('Contains at least one uppercase and lowercase characters.');\n      }\n\n      if (!this.isLatin(password)) {\n        this.errors.password.push('Latin characters and numbers only.');\n      }\n\n      return Object.values(this.errors).every(function (field) {\n        return field.length === 0;\n      });\n    },\n    isLatin: function isLatin(password) {\n      var ifLatin = /^[a-zA-z0-9_]+$/g;\n      return ifLatin.test(password);\n    },\n    onSignUp: function onSignUp() {\n      if (!this.isFormValid()) return null;\n      this.$store.dispatch(actions.signUp, {\n        email: this.email,\n        password: this.password\n      });\n    }\n  }\n};",{"version":3,"sources":["SignUp.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoGA,OAAA,OAAA;AACA,SAAA,MAAA,EAAA,OAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,QADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,KAAA,EAAA,EADA;AAEA,MAAA,QAAA,EAAA,EAFA;AAGA,MAAA,eAAA,EAAA,EAHA;AAIA,MAAA,MAAA,EAAA;AACA,QAAA,QAAA,EAAA,EADA;AAEA,QAAA,eAAA,EAAA;AAFA;AAJA,KAAA;AASA,GAZA;AAaA,EAAA,QAAA,EAAA;AACA,IAAA,IADA,kBACA;AACA,aAAA,KAAA,MAAA,CAAA,OAAA,CAAA,IAAA;AACA,KAHA;AAIA,IAAA,OAJA,qBAIA;AACA,aAAA,KAAA,MAAA,CAAA,OAAA,CAAA,OAAA;AACA;AANA,GAbA;AAqBA,EAAA,UAAA,EAAA;AACA,IAAA,OAAA,EAAA;AADA,GArBA;AAwBA,EAAA,KAAA,EAAA;AACA,IAAA,IADA,gBACA,KADA,EACA;AACA,UAAA,KAAA,KAAA,IAAA,IAAA,KAAA,KAAA,SAAA,EAAA;AACA,aAAA,OAAA,CAAA,IAAA,CAAA,MAAA,CAAA,IAAA;AACA;AACA;AALA,GAxBA;AA+BA,EAAA,OAAA,EAAA;AACA,IAAA,WADA,yBACA;AACA,UAAA,QAAA,GAAA,IAAA,CAAA,QAAA;AAAA,UAAA,eAAA,GAAA,IAAA,CAAA,eAAA;AACA,WAAA,MAAA,GAAA;AACA,QAAA,QAAA,EAAA,EADA;AAEA,QAAA,eAAA,EAAA;AAFA,OAAA;;AAIA,UAAA,QAAA,KAAA,eAAA,EAAA;AACA,aAAA,MAAA,CAAA,eAAA,CAAA,IAAA,CAAA,yBAAA;AACA;;AACA,UAAA,QAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,aAAA,MAAA,CAAA,QAAA,CAAA,IAAA,CAAA,2CAAA;AACA;;AACA,UAAA,QAAA,KAAA,QAAA,CAAA,WAAA,EAAA,IAAA,QAAA,KAAA,QAAA,CAAA,WAAA,EAAA,EAAA;AACA,aAAA,MAAA,CAAA,QAAA,CAAA,IAAA,CAAA,2DAAA;AACA;;AACA,UAAA,CAAA,KAAA,OAAA,CAAA,QAAA,CAAA,EAAA;AACA,aAAA,MAAA,CAAA,QAAA,CAAA,IAAA,CAAA,oCAAA;AACA;;AACA,aAAA,MAAA,CAAA,MAAA,CAAA,KAAA,MAAA,EAAA,KAAA,CAAA,UAAA,KAAA;AAAA,eAAA,KAAA,CAAA,MAAA,KAAA,CAAA;AAAA,OAAA,CAAA;AACA,KApBA;AAqBA,IAAA,OArBA,mBAqBA,QArBA,EAqBA;AACA,UAAA,OAAA,GAAA,kBAAA;AACA,aAAA,OAAA,CAAA,IAAA,CAAA,QAAA,CAAA;AACA,KAxBA;AAyBA,IAAA,QAzBA,sBAyBA;AACA,UAAA,CAAA,KAAA,WAAA,EAAA,EAAA,OAAA,IAAA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,OAAA,CAAA,MAAA,EAAA;AACA,QAAA,KAAA,EAAA,KAAA,KADA;AAEA,QAAA,QAAA,EAAA,KAAA;AAFA,OAAA;AAIA;AA/BA;AA/BA,CAAA","sourcesContent":["<template>\n  <div class=\"SignUp\">\n    <div class=\"bg tile\">\n      <div class=\"tile__container\">\n        <h1 class=\"tile__title\">\n          Sign Up\n        </h1>\n        <form @submit.prevent=\"onSignUp\" class=\"form\">\n          <div class=\"form__field\">\n            <div class=\"input__wrapper\">\n              <input\n                id=\"email\"\n                type=\"email\"\n                required\n                placeholder=\"Email\"\n                v-model=\"email\"\n                :class=\"[{ 'input--filled': email }, 'input']\"\n              >\n              <label class=\"input__placeholder\" for=\"email\">\n                Email\n              </label>\n            </div>\n          </div>\n          <div class=\"form__field\">\n            <div :class=\"[{'input--error': errors.password.length !== 0}, 'input__wrapper']\">\n              <input\n                id=\"password\"\n                type=\"password\"\n                required\n                placeholder=\"password\"\n                v-model=\"password\"\n                :class=\"[{ 'input--filled': password }, 'input']\"\n              >\n              <label class=\"input__placeholder\" for=\"password\">\n                Password\n              </label>\n            </div>\n            <ul class=\"form__error-list\">\n              <li :key=\"index\" class=\"form__error-item\" v-for=\"(error, index) in errors.password\">\n                {{ error }}\n              </li>\n            </ul>\n            <ul class=\"form__required-list\">\n              <li :class=\"[{ 'form__required-item--done': password.length >= 6 }, 'form__required-item']\">\n                <span class=\"form__required-text\">\n                  At least 6 characters long\n                </span>\n              </li>\n              <li :class=\"[{ 'form__required-item--done': password !== password.toLowerCase() }, 'form__required-item']\">\n                <span class=\"form__required-text\">\n                  One uppercase character\n                </span>\n              </li>\n              <li :class=\"[{ 'form__required-item--done': password !== password.toUpperCase() }, 'form__required-item']\">\n                <span class=\"form__required-text\">\n                  One lowercase character\n                </span>\n              </li>\n              <li :class=\"[{ 'form__required-item--done': isLatin(password) }, 'form__required-item']\">\n                <span class=\"form__required-text\">\n                  Latin characters only\n                </span>\n              </li>\n            </ul>\n          </div>\n          <div class=\"form__field\">\n            <div :class=\"[{ 'input--error': errors.password.length !== 0 }, 'input__wrapper']\">\n              <input\n                id=\"confirm-password\"\n                type=\"password\"\n                required\n                placeholder=\"Confirm Password\"\n                v-model=\"confirmPassword\"\n                :class=\"[{ 'input--filled': confirmPassword }, 'input']\"\n              >\n              <label class=\"input__placeholder\" for=\"confirm-password\">\n                Confirm Password\n              </label>\n            </div>\n            <ul class=\"form__error-list\">\n              <li :key=\"index\" class=\"form__error-item\" v-for=\"(error, index) in errors.confirmPassword\">\n                {{ error }}\n              </li>\n            </ul>\n          </div>\n          <div class=\"form__btns\">\n            <button type=\"submit\" class=\"btn btn--primary\" :disabled=\"loading\">\n              Sign Up\n            </button>\n          </div>\n        </form>\n        <div class=\"Spinner__overflow\" v-if=\"loading\">\n          <Spinner />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n  import Spinner from '../../components/Spinner/Spinner'\n  import { routes, actions } from '../../helpers/constants';\n\n  export default {\n    name: 'SignUp',\n    data() {\n      return {\n        email: '',\n        password: '',\n        confirmPassword: '',\n        errors: {\n          password: [],\n          confirmPassword: [],\n        },\n      };\n    },\n    computed: {\n      user() {\n        return this.$store.getters.user;\n      },\n      loading() {\n        return this.$store.getters.loading;\n      },\n    },\n    components: {\n      Spinner,\n    },\n    watch: {\n      user(value) {\n        if (value !== null && value !== undefined) {\n          this.$router.push(routes.home);\n        }\n      },\n    },\n    methods: {\n      isFormValid() {\n        const { password, confirmPassword } = this;\n        this.errors = {\n          password: [],\n          confirmPassword: [],\n        };\n        if (password !== confirmPassword) {\n          this.errors.confirmPassword.push('Passwords do not match.');\n        }\n        if (password.length < 6) {\n          this.errors.password.push('Password should be at least 6 characters.');\n        }\n        if (password === password.toLowerCase() || password === password.toUpperCase()) {\n          this.errors.password.push('Contains at least one uppercase and lowercase characters.');\n        }\n        if (!this.isLatin(password)) {\n          this.errors.password.push('Latin characters and numbers only.');\n        }\n        return Object.values(this.errors).every(field => field.length === 0);\n      },\n      isLatin(password) {\n        let ifLatin =  /^[a-zA-z0-9_]+$/g;\n        return ifLatin.test(password);\n      },\n      onSignUp() {\n        if (!this.isFormValid()) return null;\n        this.$store.dispatch(actions.signUp, {\n          email: this.email,\n          password: this.password\n        });\n      },\n    },\n  };\n</script>\n"],"sourceRoot":"src/pages/SignUp"}]}